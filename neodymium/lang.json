{
    "meta": {
        "name": "neodymium",
        "bin": "nc",
        "version": "0.0.1"
    },
    "tokens": [
        {
            "name": "LPAREN",
            "matcher": "(",
            "is_regex": false
        },
        {
            "name": "RPAREN",
            "matcher": ")",
            "is_regex": false
        },
        {
            "name": "KEYWORD_LANG",
            "matcher": "lang",
            "is_regex": false
        },
        {
            "name": "KEYWORD_TOKENS",
            "matcher": "tokens",
            "is_regex": false
        },
        {
            "name": "KEYWORD_TEXT",
            "matcher": "text",
            "is_regex": false
        },
        {
            "name": "KEYWORD_REGEX",
            "matcher": "regex",
            "is_regex": false
        },
        {
            "name": "LITERAL_STRING",
            "matcher": "\\\"[^\"]*\\\"",
            "is_regex": true
        },
        {
            "name": "KEYWORD_SYMBOLS",
            "matcher": "symbols",
            "is_regex": false
        },
        {
            "name": "KEYWORD_CONSTRUCTIONS",
            "matcher": "constructions",
            "is_regex": false
        },
        {
            "name": "KEYWORD_RULES",
            "matcher": "rules",
            "is_regex": false
        },
        {
            "name": "KEYWORD_ACTION",
            "matcher": "action",
            "is_regex": false
        },
        {
            "name": "LITERAL_CPP",
            "matcher": "\\`[^\\`]*\\`",
            "is_regex": true
        },
        {
            "name": "KEYWORD_MAIN",
            "matcher": "main",
            "is_regex": false
        },
        {
            "name": "KEYWORD_START",
            "matcher": "start",
            "is_regex": false
        }
    ],
    "rules": [
        {
            "name": "lang_def",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "LPAREN",
                        "KEYWORD_LANG",
                        "LITERAL_STRING",
                        "tokens_def",
                        "rules_def",
                        "start_def",
                        "main_def",
                        "RPAREN"
                    ],
                    "action": "        out_stream << \"{\\n    \\\"meta\\\": {\\n        \\\"name\\\": \" << dynamic_cast<Ast_Node_Token*>($2)->token.value << \",\\n        \\\"bin\\\": \\\"compiler\\\",\\n        \\\"version\\\": \\\"0.1.0\\\"\\n    },\\n\";\n        $3->traverse();\n        $4->traverse();\n        $5->traverse();\n        $6->traverse();\n        out_stream << \"}\\n\";\n"
                }
            ]
        },
        {
            "name": "start_def",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "LPAREN",
                        "KEYWORD_START",
                        "LITERAL_STRING",
                        "RPAREN"
                    ],
                    "action": "        out_stream << \"    \\\"start_rule\\\": \" << dynamic_cast<Ast_Node_Token*>($2)->token.value << \",\\n\";\n"
                }
            ]
        },
        {
            "name": "token",
            "constructions": [
                {
                    "tag": "text",
                    "symbols": [
                        "LPAREN",
                        "KEYWORD_TEXT",
                        "LITERAL_STRING",
                        "LITERAL_STRING",
                        "RPAREN"
                    ],
                    "action": "        out_stream << \"        {\\n            \\\"name\\\":\" << dynamic_cast<Ast_Node_Token*>($2)->token.value << \",\\n            \\\"is_regex\\\": \\\"false\\\",\\n            \\\"value\\\": \" << dynamic_cast<Ast_Node_Token*>($3)->token.value << \"\\n        }\";\n"
                },
                {
                    "tag": "regex",
                    "symbols": [
                        "LPAREN",
                        "KEYWORD_REGEX",
                        "LITERAL_STRING",
                        "LITERAL_STRING",
                        "RPAREN"
                    ],
                    "action": "        out_stream << \"        {\\n            \\\"name\\\":\" << dynamic_cast<Ast_Node_Token*>($2)->token.value << \",\\n            \\\"is_regex\\\": \\\"true\\\",\\n            \\\"value\\\": \" << dynamic_cast<Ast_Node_Token*>($3)->token.value << \"\\n        }\";\n"
                }
            ]
        },
        {
            "name": "tokens_list",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "token"
                    ],
                    "action": "        $0->traverse();\n"
                },
                {
                    "tag": "recursive",
                    "symbols": [
                        "token",
                        "tokens_list"
                    ],
                    "action": "        $0->traverse();\n        if($1->children.size() > 0) out_stream << \",\\n\";\n        $1->traverse();\n"
                }
            ]
        },
        {
            "name": "tokens_def",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "LPAREN",
                        "KEYWORD_TOKENS",
                        "tokens_list",
                        "RPAREN"
                    ],
                    "action": "        out_stream << \"    \\\"tokens\\\": [\\n\";\n        $2->traverse();\n        out_stream << \"\\n    ],\\n\";\n"
                }
            ]
        },
        {
            "name": "action_def",
            "constructions": [
                {
                    "tag": "empty",
                    "symbols": [
                        "LPAREN",
                        "KEYWORD_ACTION",
                        "LITERAL_CPP",
                        "RPAREN"
                    ],
                    "action": "        out_stream << escape_cpp_literal(dynamic_cast<Ast_Node_Token*>($2)->token.value) << \"\\n\";\n"
                }
            ]
        },
        {
            "name": "symbols_list",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "LITERAL_STRING"
                    ],
                    "action": "        out_stream << \"                \" << dynamic_cast<Ast_Node_Token*>($0)->token.value;\n"
                },
                {
                    "tag": "recursive",
                    "symbols": [
                        "LITERAL_STRING",
                        "symbols_list"
                    ],
                    "action": "        out_stream << \"                \" << dynamic_cast<Ast_Node_Token*>($0)->token.value;\n        if($1->children.size() > 0) out_stream << \",\\n\";\n        $1->traverse();\n"
                }
            ]
        },
        {
            "name": "symbols_def",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "LPAREN",
                        "KEYWORD_SYMBOLS",
                        "symbols_list",
                        "RPAREN"
                    ],
                    "action": "         $2->traverse();\n"
                }
            ]
        },
        {
            "name": "construction",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "LPAREN",
                        "LITERAL_STRING",
                        "symbols_def",
                        "action_def",
                        "RPAREN"
                    ],
                    "action": "        out_stream << \"        {\\n            \\\"tag\\\": \" << dynamic_cast<Ast_Node_Token*>($1)->token.value << \",\\n            \\\"symbols\\\": [\\n\";\n        $2->traverse();\n        out_stream << \"\\n            ],\\n            \\\"action\\\": \";         $3->traverse();\n         out_stream << \"\\n        }\";\n"
                }
            ]
        },
        {
            "name": "constructions_list",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "construction"
                    ],
                    "action": "        $0->traverse();\n"
                },
                {
                    "tag": "recursive",
                    "symbols": [
                        "construction",
                        "constructions_list"
                    ],
                    "action": "        $0->traverse();\n        if($1->children.size() > 0) out_stream << \",\\n\";\n        $1->traverse();\n"
                }
            ]
        },
        {
            "name": "constructions_def",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "LPAREN",
                        "KEYWORD_CONSTRUCTIONS",
                        "constructions_list",
                        "RPAREN"
                    ],
                    "action": "        $2->traverse();\n"
                }
            ]
        },
        {
            "name": "rule",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "LPAREN",
                        "LITERAL_STRING",
                        "constructions_def",
                        "RPAREN"
                    ],
                    "action": "        out_stream << \"        {\\n            \\\"name\\\": \" << dynamic_cast<Ast_Node_Token*>($1)->token.value << \",\\n            \\\"constructions\\\": [\\n\";\n        $2->traverse();\n        out_stream << \"\\n            ]\\n        }\";\n"
                }
            ]
        },
        {
            "name": "rules_list",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "rule"
                    ],
                    "action": "       $0->traverse();\n"
                },
                {
                    "tag": "recursive",
                    "symbols": [
                        "rule",
                        "rules_list"
                    ],
                    "action": "        $0->traverse();\n        if($1->children.size() > 0) out_stream << \",\\n\";\n        $1->traverse();\n"
                }
            ]
        },
        {
            "name": "rules_def",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "LPAREN",
                        "KEYWORD_RULES",
                        "rules_list",
                        "RPAREN"
                    ],
                    "action": "        out_stream << \"    \\\"rules\\\": [\\n\";\n        $2->traverse();\n        out_stream << \"\\n    ],\\n\";\n"
                }
            ]
        },
        {
            "name": "main_def",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "LPAREN",
                        "KEYWORD_MAIN",
                        "LITERAL_CPP",
                        "RPAREN"
                    ],
                    "action": "       out_stream << \"    \\\"main\\\": \" << escape_cpp_literal(dynamic_cast<Ast_Node_Token*>($2)->token.value) << \"\\n\";\n"
                }
            ]
        }
    ],
    "start_rule": "lang_def",
    "main": "#include <stdio.h>\n#include \"ast.hpp\"\n#include \"tokens.hpp\"\n#include \"lexer.hpp\"\n#include <fstream>\n \n\n extern Ast_Node* ast_root;\nextern void yyparse();\nextern std::ofstream out_stream;\n  \n\n int main(int argc, char** argv){ \n if(argc < 3) { printf(\"Usage: %s <input_file> <output_file>\\n\", argv[0]); return 1; } \n yyin=fopen(argv[1],\"r\");\n yyparse();\n printf(\"Parsing complete.\\n\\\n\");\n ast_root->print(); \n out_stream.open(argv[2]);  \n ast_root->traverse(); \n return 0; \n}"
}