(lang "neodymium"
(tokens 
    (text "LPAREN" "(")
    (text "RPAREN" ")")
    (text "KEYWORD_LANG" "lang")
    (text "KEYWORD_TOKENS" "tokens")
    (text "KEYWORD_TEXT" "text")
    (text "KEYWORD_REGEX" "regex")
    (text "KEYWORD_RULES" "rules")
    (text "KEYWORD_CONSTRUCTIONS" "constructions")
    (text "KEYWORKD_SYMBOLS" "symbols")
    (text "KEYWORD_ACTION" "action")
    (text "KEYWORD_START" "start")
    (text "KEYWORD_MAIN" "main")
    (regex "LITERAL_STRING" "\\\"([^\"\\\\]|\\\\.)*\\\"")
    (regex "LITERAL_CPP" "\\`[^\\`]*\\`")
)
(rules
    ("lang_def" (start) (constructions
        ("base" 
            (symbols
                "LPAREN"
                "KEYWORD_LANG"
                "LITERAL_STRING"
                "tokens_def"
                "rules_def"
                // "start_def"
                "main_def"
                "RPAREN"
            )
            (action `
                out_stream << "\{\n    \"meta\": {\n        \"name\": " << dynamic_cast<Ast_Node_Token*>($2)->token.value
                    << ",\n    \"bin\": \"out.bin\",\n    \"version\": \"0.1.0\"\n   },\n";
                $3->traverse();
                $4->traverse();
                auto sr = user_data["start_rule"];
                out_stream << "    \"start_rule\": " << sr << ",\n";
                $5->traverse();
                //$6->traverse();
                out_stream << "\n}\n";
            `)
        )
    ))
    ("token" (constructions
        ("text" 
            (symbols
                "LPAREN"
                "KEYWORD_TEXT"
                "LITERAL_STRING"
                "LITERAL_STRING"
                "RPAREN"
            )
            (action `
                out_stream << "        {\n            \"name\":" << dynamic_cast<Ast_Node_Token*>($2)->token.value
                 << ",\n            \"is_regex\": false,\n            \"matcher\": "
                 << dynamic_cast<Ast_Node_Token*>($3)->token.value << "\n        }";
            `)
        )
        ("regex"
            (symbols
                "LPAREN"
                "KEYWORD_REGEX"
                "LITERAL_STRING"
                "LITERAL_STRING"
                "RPAREN"
            )
            (action `
                out_stream << "        {\n            \"name\":" << dynamic_cast<Ast_Node_Token*>($2)->token.value
                 << ",\n            \"is_regex\": true,\n            \"matcher\": " 
                 << dynamic_cast<Ast_Node_Token*>($3)->token.value << "\n        }";
            `)
        )
    ))
    ("tokens_list" (constructions
        ("base" 
            (symbols
                "token"
            )
            (action `
                $0->traverse();
            `)
        )
        ("recursive" 
            (symbols
                "token"
                "tokens_list"
            )
            (action `
                $0->traverse();
                if($1->children.size() > 0) 
                    out_stream << ",\n";
                $1->traverse();
            `)
        )
    ))
    ("tokens_def" (constructions
        ("base"
            (symbols
                "LPAREN"
                "KEYWORD_TOKENS"
                "tokens_list"
                "RPAREN"
            )
            (action `
                out_stream << "    \"tokens\": [\n";
                $2->traverse();
                out_stream << "\n    ],\n";
            `)
        )
    ))
    ("action_def" (constructions
        ("base"
            (symbols
                "LPAREN"
                "KEYWORD_ACTION"
                "LITERAL_CPP"
                "RPAREN"
            )
            (action `
                out_stream << "    \"action\": " << escape_cpp_literal(dynamic_cast<Ast_Node_Token*>($2)->token.value) << "\n";
            `)
        )
    ))
    ("symbols_list" (constructions
        ("base"
            (symbols
                "LITERAL_STRING"
            )
            (action `
                out_stream << "        " << dynamic_cast<Ast_Node_Token*>($0)->token.value;
            `)
        )
        ("recursive"
            (symbols
                "LITERAL_STRING"
                "symbols_list"
            )
            (action `
                out_stream << dynamic_cast<Ast_Node_Token*>($0)->token.value;
                if($1->children.size() > 0)
                    out_stream << ",\n";
                $1->traverse();
            `)
        )
    ))
    ("symbols_def" (constructions 
        ("base"
            (symbols
                "LPAREN"
                "KEYWORKD_SYMBOLS"
                "symbols_list"
                "RPAREN"
            )
            (action `
                $2->traverse();
            `)
        )
    ))
    ("construction" (constructions
        ("base"
            (symbols
                "LPAREN"
                "LITERAL_STRING"
                "symbols_def"
                "action_def"
                "RPAREN"
            )
            (action `
                out_stream << "          {\n";
                out_stream << "               \"tag\": " << dynamic_cast<Ast_Node_Token*>($1)->token.value << ",\n";
                out_stream << "               \"symbols\": [\n";
                $2->traverse();
                out_stream << "\n               ],\n";
                $3->traverse();
                out_stream << "\n          }";
            `)
        )
    ))
    ("constructions_list" (constructions
        ("base"
            (symbols
                "construction"
            )
            (action `
                $0->traverse();
            `)
        )
        ("recursive"
            (symbols
                "construction"
                "constructions_list"
            )
            (action `
                $0->traverse();
                if($1->children.size() > 0)
                    out_stream << ",\n";
                $1->traverse();
            `)
        )
    ))
    ("constructions_def" (constructions
        ("base"
            (symbols
                "LPAREN"
                "KEYWORD_CONSTRUCTIONS"
                "constructions_list"
                "RPAREN"
            )
            (action `
                $2->traverse();
            `)
        )
    ))
    ("rule" (constructions
        ("base"
            (symbols
                "LPAREN"
                "LITERAL_STRING"
                "constructions_def"
                "RPAREN"
            )
            (action `
                out_stream << "    {\n";
                out_stream << "        \"name\": " << dynamic_cast<Ast_Node_Token*>($1)->token.value << ",\n";
                out_stream << "        \"constructions\": [\n";
                $2->traverse();
                out_stream << "\n        ]\n";
                out_stream << "    }";
            `)
        )
        ("with_start"
            (symbols
                "LPAREN"
                "LITERAL_STRING"
                "LPAREN"
                "KEYWORD_START"
                "RPAREN"
                "constructions_def"
                "RPAREN"
            )
            (action `
                user_data["start_rule"] = dynamic_cast<Ast_Node_Token*>($1)->token.value;
                out_stream << "    {\n";
                out_stream << "        \"name\": " << dynamic_cast<Ast_Node_Token*>($1)->token.value << ",\n";
                out_stream << "        \"constructions\": [\n";
                $5->traverse();
                out_stream << "\n        ]\n";
                out_stream << "    }";
            `)
        )
    ))
    ("rules_list" (constructions 
        ("base"
            (symbols
                "rule"
            )
            (action `
                $0->traverse();
            `)
        )
        ("recursive"
            (symbols
                "rule"
                "rules_list"
            )
            (action `
                $0->traverse();
                if($1->children.size() > 0)
                    out_stream << ",\n";
                $1->traverse();
            `)
        )
    ))
    ("rules_def" (constructions
        ("base"
            (symbols
                "LPAREN"
                "KEYWORD_RULES"
                "rules_list"
                "RPAREN"
            )
            (action `
                out_stream << "    \"rules\": [\n";
                $2->traverse();
                out_stream << "\n    ],\n";
            `)
        )
    ))
    ("main_def" (constructions
        ("base"
            (symbols
                "LPAREN"
                "KEYWORD_MAIN"
                "LITERAL_CPP"
                "RPAREN"
            )
            (action `
                out_stream << "    \"main\": " << escape_cpp_literal(dynamic_cast<Ast_Node_Token*>($2)->token.value) << "\n";
            `)
        )
    ))
)

(main `

#include <stdio.h>
#include "ast.hpp"
#include "tokens.hpp"
#include "lexer.hpp"
#include <fstream>
#include <unordered_map>

extern Ast_Node* ast_root;
extern void yyparse();
extern std::ofstream out_stream;

int main(int argc, char** argv){
    if(argc < 3) { 
        printf("Usage: %s <input_file> <output_file>", argv[0]);
        return 1;
    }
    
    yyin=fopen(argv[1],"r");
    yyparse();
    printf("Parsing complete.\n\n");
    
    ast_root->print();
    out_stream.open(argv[2]);
    ast_root->traverse();
    
    return 0;
}

`)

)