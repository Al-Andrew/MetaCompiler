{
    "meta": {
        "name": "simplest_language",
        "bin": "compiler",
        "version": "0.1.0"
    },
    "tokens": [
        {
            "name": "IF",
            "matcher": "if",
            "is_regex": false
        },
        {
            "name": "LPAREN",
            "matcher": "(",
            "is_regex": false
        },
        {
            "name": "RPAREN",
            "matcher": ")",
            "is_regex": false
        },
        {
            "name": "RBRACE",
            "matcher": "}",
            "is_regex": false
        },
        {
            "name": "LBRACE",
            "matcher": "{",
            "is_regex": false
        },
        {
            "name": "SEMICOLON",
            "matcher": ";",
            "is_regex": false
        },
        {
            "name": "ATSIGN",
            "matcher": "@",
            "is_regex": false
        },
        {
            "name": "BOOL_LITERAL_TRUE",
            "matcher": "true",
            "is_regex": false
        },
        {
            "name": "BOOL_LITERAL_FALSE",
            "matcher": "false",
            "is_regex": false
        },
        {
            "name": "IDENTIFIER",
            "matcher": "[a-zA-Z_][a-zA-Z0-9_]*",
            "is_regex": true
        },
        {
            "name": "STRING_LITERAL",
            "matcher": "\\\"[^\\\"]*\\\"",
            "is_regex": true
        }
    ],
    "rules": [
        {
            "name": "builtin",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "ATSIGN",
                        "LBRACE",
                        "IDENTIFIER",
                        "LPAREN",
                        "STRING_LITERAL",
                        "RPAREN",
                        "RBRACE"
                    ],
                    "action": "$2($4)"
                }
            ]
        },
        {
            "name": "program",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "statement_list"
                    ],
                    "action": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <stdbool.h>\\n\\nint main() {\\n $0 return 0;\\n}"
                }
            ]
        },
        {
            "name": "statement_list",
            "constructions": [
                {
                    "tag": "base",
                    "symbols": [
                        "statement"
                    ],
                    "action": "$0;"
                },
                {
                    "tag": "recursive",
                    "symbols": [
                        "statement",
                        "statement_list"
                    ],
                    "action": "$0\\n$1"
                }
            ]
        },
        {
            "name": "statement",
            "constructions": [
                {
                    "tag": "if_statement",
                    "symbols": [
                        "IF",
                        "LPAREN",
                        "expression",
                        "RPAREN",
                        "LBRACE",
                        "statement_list",
                        "RBRACE"
                    ],
                    "action": "if ($2) {\\n $5\\n}"
                },
                {
                    "tag": "builtin_statement",
                    "symbols": [
                        "builtin",
                        "SEMICOLON"
                    ],
                    "action": "$0"
                }
            ]
        },
        {
            "name": "expression",
            "constructions": [
                {
                    "tag": "bool_literal_true",
                    "symbols": [
                        "BOOL_LITERAL_TRUE"
                    ],
                    "action": "true"
                },
                {
                    "tag": "bool_literal_false",
                    "symbols": [
                        "BOOL_LITERAL_FALSE"
                    ],
                    "action": "false"
                }
            ]
        }
    ],
    "start_rule": "program"
}